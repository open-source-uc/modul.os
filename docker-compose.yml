version: '3'

services:

# =============================================================
#	 TRAEFIK - reverse proxy
# =============================================================
  reverse-proxy:
    image: traefik:v2.10
    container_name: traefik_v2
    hostname: traefik_v2
    networks:
      - default
    command:
      - --entrypoints.web.address=:80
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      # TODO: REVISA ESTO EN PRODUCCION
      # - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # - --certificatesresolvers.leresolver.acme.email=INGRESAR CORREO
      # - --certificatesresolvers.leresolver.acme.storage=/certificates/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs/beta:/certificates

# =============================================================
#	 API - Python
# =============================================================
  api:
    container_name: api
    build:
      context:
        ./backend
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.services.api.loadbalancer.server.port: 80
      # TODO traefik.http.routers.api.rule: Host(`INGRESAR HOST`)
      traefik.http.routers.api.rule: PathPrefix(`/api`)
      traefik.http.routers.api.tls: true
      traefik.http.routers.api.tls.certresolver: leresolver

# =============================================================
#	 TODO: FRONTEND - React
# =============================================================
  # frontend:
  #   container_name: frontend
  #   build:
  #     context:
  #       ./frontend
  #   restart: unless-stopped
  #   labels:
  #     traefik.enable: true
  #     # TODO traefik.http.routers.frontend.rule: Host(`INGRESAR HOST`)
  #     traefik.http.routers.frontend.rule: PathPrefix(`/`)
  #     traefik.http.services.frontend.loadbalancer.server.port: 3000
  #     traefik.http.routers.frontend.tls: true
  #     traefik.http.routers.frontend.tls.certresolver: leresolver


# =============================================================
#	 Postgres
# =============================================================
  db:
    image: postgres:14.2-alpine
    networks:
      - default
    container_name: db
    env_file:
      - backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - default
    depends_on:
      - db
    env_file:
      - backend/.env
    deploy:
      labels:
        traefik.enable: true
        # TODO traefik.http.routers.pgadmin.rule: Host(`INGRESAR HOST`)
        traefik.http.routers.pgadmin.rule: PathPrefix(`/pgadmin`)
        traefik.http.services.pgadmin.loadbalancer.server.port: 5050
        traefik.http.routers.pgadmin.tls: true
        traefik.http.routers.pgadmin.tls.certresolver: leresolver

volumes:
  postgres_data:

networks:
  default:
    name: local
    external: true
